{"version":3,"sources":["components/ColorBox.js","demoRedux/reducers/statusReducer.js","demoRedux/reducers/sortReducer.js","demoRedux/reducers/index.js","demoRedux/demo.js","demoRedux/actions/index.js","demoRedux/consts/constAction.js","App.js","serviceWorker.js","index.js"],"names":["ColorBox","clickUp","setState","fontSize","parseInt","state","clickDown","clickReset","color","this","className","map","index","key","style","backgroundColor","onClick","selectColor","type","value","Component","myReducer","action","initialState","sort","by","combineReducers","status","store","createStore","console","log","getState","dispatch","App","props","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yQA4CeA,G,iBAxCb,aAAc,IAAD,8BACX,+CAUFC,QAAQ,WACN,EAAKC,SAAS,CAACC,SAASC,SAAS,EAAKC,MAAMF,UAAU,KAZ3C,EAcbG,UAAU,WACR,EAAKJ,SAAS,CAACC,SAASC,SAAS,EAAKC,MAAMF,UAAU,KAf3C,EAiBbI,WAAW,WACT,EAAKL,SAAS,CAACM,MAAM,QAAQL,SAAS,QAhBtC,EAAKE,MAAM,CACTG,MAAM,QACNL,SAAS,MAJA,E,yEAQDK,GACVC,KAAKP,SAAS,CAACM,MAAMA,M,+BAWd,IAAD,OAEN,OACE,6BACA,yBAAKE,UAAU,YACb,qCAJQ,CAAC,MAAM,OAAO,SAAS,QAKvBC,KAAI,SAACH,EAAMI,GAAP,OAAe,yBAAKF,UAAU,QAAQG,IAAKD,EAAOE,MAAO,CAACC,gBAAgBP,GAAQQ,QAAS,kBAAI,EAAKC,YAAYT,UAI9H,2BAAOU,KAAK,OAAOC,MAAM,gBAAgBL,MAAO,CAACN,MAAMC,KAAKJ,MAAMG,MAAML,SAASM,KAAKJ,MAAMF,SAAS,QACrG,4BAAQa,QAASP,KAAKR,SAAtB,aACA,4BAAQe,QAASP,KAAKH,WAAtB,aACA,4BAAQU,QAASP,KAAKF,YAAtB,c,GAlCkBa,c,OCMTC,EAPD,WAA8B,IAA7BhB,IAA4B,yDAATiB,EAAS,uCACzC,MAAiB,kBAAdA,EAAOJ,KACRb,GAAOA,EAGFA,GCNLkB,EAAa,CACfC,KAAM,CACJC,GAAG,OACHN,MAAO,IAaIE,EATD,WAA8B,IAA7BhB,EAA4B,uDAAtBkB,EAAaD,EAAS,uCAEzC,GAAiB,SAAdA,EAAOJ,KAAc,CAAC,IAAD,EACPI,EAAOE,KAAjBC,EADiB,EACjBA,GAAGN,EADc,EACdA,MACR,MAAQ,CAACM,KAAIN,SAGf,OAAOd,GCNMgB,EALCK,YAAgB,CAC9BC,SACAH,SCDII,EAAMC,YAAYR,GACxBS,QAAQC,IAAI,YAAcH,EAAMI,YAEhCJ,EAAMK,SCNG,CACLf,KCHuB,kBFS3BY,QAAQC,IAAI,gBAAkBH,EAAMI,YAEpCJ,EAAMK,SCJG,CACLf,KCPc,ODQdM,KDEgB,CAClBC,GAAI,QACJN,OAAO,KAGTW,QAAQC,IAAI,UAAWH,EAAMI,Y,IGOdE,E,YAjBb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACD9B,MAAM,CACTG,MAAM,QACNL,SAAS,MAJK,E,sEAQhB,OACE,yBAAKO,UAAU,OACb,oCACA,kBAAC,EAAD,W,GAZUU,aCOEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,a","file":"static/js/main.50fbf819.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport '../App.css';\n\nclass ColorBox  extends Component {\n  constructor(){\n    super()\n    this.state={\n      color:'black',\n      fontSize:'20'\n    }\n  }\n  \n  selectColor(color){ \n    this.setState({color:color})\n  }\n  clickUp=()=>{\n    this.setState({fontSize:parseInt(this.state.fontSize)+1})\n  }\n  clickDown=()=>{\n    this.setState({fontSize:parseInt(this.state.fontSize)-1})\n  }\n  clickReset=()=>{\n    this.setState({color:'black',fontSize:'20'})\n  }\n  render(){\n    const color=['red','blue','orange','pink']\n    return(\n      <div>\n      <div className='ColorBox'>\n        <h4>Color</h4>\n        { color.map((color,index)=><div className='color' key={index} style={{backgroundColor:color}} onClick={()=>this.selectColor(color)}></div>) }\n        \n  \n      </div>\n      <input type='text' value='Color of Text' style={{color:this.state.color,fontSize:this.state.fontSize+'px'}}></input>\n      <button onClick={this.clickUp}>Tăng</button>\n      <button onClick={this.clickDown}>Giảm</button>\n      <button onClick={this.clickReset}>Reset</button>\n      \n      </div>\n    )\n  }\n}\n\nexport default ColorBox;\n","\nlet initialState=true;\nlet myReducer=(state=initialState,action)=>{\n  if(action.type==='Toggle_status'){\n    state=!state\n    return state;\n  }\n  return state;\n}\nexport default myReducer;","\nlet initialState={\n  sort :{\n    by:'name',\n    value :1\n  }\n}\n \nlet myReducer=(state=initialState,action)=>{\n  \n  if(action.type==='Sort'){ \n    let {by,value}=action.sort  //by=action.sort.by\n    return  {by ,value}\n\n  }\n  return state;\n}\nexport default myReducer;","import status from './statusReducer';\nimport sort from './sortReducer';\nimport {combineReducers} from 'redux';\n\nconst myReducer=combineReducers({\n  status, // tương đương status :status \n  sort  // tương đương sort :sort \n})\n\nexport default myReducer;","import {createStore} from 'redux';\nimport myReducer from './reducers/index';\nimport {status,sort} from './actions/index';\n\n\nconst store=createStore(myReducer);\nconsole.log('Default :' , store.getState());\n\nstore.dispatch(status());\nconsole.log('Toggle_status' , store.getState())\n\nstore.dispatch(sort({\n  by: 'name1',\n  value:-1\n}));\n\nconsole.log('Sort : ' ,store.getState());","import * as types from '../consts/constAction';\nexport const status=()=>{\n  return {\n    type : types.Toggle_status\n  }\n}\nexport const sort=(sort)=>{\n  return {\n    type : types.Sort,\n    sort // tương đương sort :sort (sort sau được truyền vào từ tham số truyền vào function)\n  }\n}","export const Toggle_status='Toggle_status';\nexport const Sort='Sort';","import React,{Component} from 'react';\nimport './App.css';\nimport ColorBox from './components/ColorBox';\nimport demo from './demoRedux/demo';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      color:'black',\n      fontSize:'20'\n    }\n  }\n  render(){\n    return(\n      <div className='App'>\n        <h1>Test</h1>\n        <ColorBox/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}